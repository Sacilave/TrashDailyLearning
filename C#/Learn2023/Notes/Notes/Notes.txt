VisualStudio 快捷键：
	Ctrl + H  替换
	Ctrl + F  查找
	Shift + Ctrl + A  新建项


基础：
	namespace (命名空间)  用于区分各个类
		注意 using 的各个命名空间中是否有重名的 class，否则调用 class 时会没有唯一的指向
		namespace 可以嵌套，使用 . 访问 namespace 中的 namespace

	字段是在类或结构中直接声明的任意类型的变量
	方法的实现 指 的就是 方法花括号内的执行命令
	C# 中方法分为 实例方法(将 class 实例化成 对象)，静态对象(设置为 static 并可直接使用)
	class (类)  为引用类型
		class 中所有东西都称为成员
		成员分为：
			属性：一个字段
				如 public string name; 中的 name 就是一个 属性成员
			函数(方法)：
				如 public void outputName() {} 中的 outputName() 就是一个 方法成员
	入口为 Main()
		
预处理器：
	#define definedName  // 用于定义一个名为 definedName 的常量
	条件常量：
		#if (definedName)  // 用于判断是否定义了名为 definedName 的常量，括号内可填更多其他常量名 可使用运算符 == != && ||
		#elif ()  与  #else 与 #if 同为预定义判断条件, 必须 #endif 作为语句的结束
	#error  允许指定位置生成一个错误
	#warning  允许指定位置生成一个警告


数据类型：
	值类型 (ValueTypes)：不能被继承
		bool  默认False
		char  16位 Unicode字符  默认''
		decimal  128 位精确的十进制值，28-29 有效位数  默认0.0M
		浮点型：
			float  32位  默认 0.0F
			double  64位  默认 0.0D
		整型： 默认 0
			有符号整型：
				sbyte  8位  0~255
				short  16位  -32768~32767 
				int  32位  -2,147,483,648~2,147,483,647	 
				long  64位  -9,223,372,036,854,775,808~9,223,372,036,854,775,807	
			无符号整型：
				byte
				ushort
				uint
				ulong

	引用类型(Reference Types): 可被继承，引用类型 需要用 new关键字 创建
		Object(对象类型):
			object 变量名;
			Object类是所有类型的基类，因此可被被分配为任何类型(值类型，引用类型，预定义类型，用户自定义类型)
			拆装箱：
				
		Dynamic(动态类型)：
			dynamic<变量名> = value
			可以存储任意类型在 dynamic类型中，这些变量的类型检查在运行时发生
			
		String(字符串类型)：
			string 变量名 = ""
			逐字字符串：@""
				将转移符 \ 当做正常字符，可以随意在字符串内随意换行，同时换行符和缩进空格都算在字符串长度内

	指针类型(Pointer Types)：
		类型名* 变量名  （如 int* inPointer01;）

变量，常量的 声明：
	变量：类型 名称 = 值;
		string greeting = "Hello";
		int a = 3, b = 2, c = a + b;
		List<double> xs = new();
	常量：const 类型 名称 = 值;
		const string Greeting = "Hello";
	隐式类型变量：var 名称 = 值;
		var 在编译中根据值自动推断变量类型
		var greeting = "Hello";
		Console.WriteLine(greeting.GetType());  // output: System.String
		var a = 32;
		Console.WriteLine(a.GetType());  // output: System.Int32
		var xs = new List<double>();
		



类型转换：
	隐式转换：自动完成
		小范围数据 转换为 大范围数据，派生类型 转换为 基类
		如 将 byte 类型 赋值给 int 类型，int 赋值给 long 等
	显式转换：(转换的数据类型)被转换的变量名	
		大范围数据 转换为 小范围数据，一个对象类型 转换为 另一个对象类型
		如 int a = (int)aLoneNum;

		更多显式转换函数：
			以下函数均属于 System namespace 中的 Convert 类，使用时： int a = Convert.ToInt32("123");
			ToBoolean
				如果可能的话，把类型转换为布尔型。
			ToByte
				把类型转换为字节类型。
			ToChar
				如果可能的话，把类型转换为单个 Unicode 字符类型。
			ToDateTime
				把类型（整数或字符串类型）转换为 日期-时间 结构。
			ToDecimal
				把浮点型或整数类型转换为十进制类型。
			ToDouble
				把类型转换为双精度浮点型。
			ToInt16
				把类型转换为 16 位整数类型。
			ToInt32
				把类型转换为 32 位整数类型。
			ToInt64
				把类型转换为 64 位整数类型。
			ToSbyte
				把类型转换为有符号字节类型。
			ToSingle
				把类型转换为小浮点数类型。
			ToString
				把类型转换为字符串类型。
			ToType
				把类型转换为指定类型。
			ToUInt16
				把类型转换为 16 位无符号整数类型。
			ToUInt32
				把类型转换为 32 位无符号整数类型。
			ToUInt64
				把类型转换为 64 位无符号整数类型。

转义符：
	\a  Alert 输出警告声
	\b  Backspace
	\f  换页符
	\v  垂直 Tab

常量：
	整型常量：
		十进制 无前缀
		八进制 前缀 0 
		十六进制 前缀 0x
		unsigned 后缀 U 或 u
		long 后缀 L 或 l
	浮点常量
	字符常量：使用 '' 存储
		可存储转义符
	字符串常量： "" 或 @""


封装（访问修饰符）：
	封装是为了防止对实现细节的访问。 抽象和封装是面向对象程序设计的相关特性。抽象允许相关信息可视化，封装则使开发者实现所需级别的抽象。
	封装根据需要 设置使用者访问权限，通过访问修饰符实现
	各类访问修饰符：
		public：所有对象都可以访问；
		private：对象本身在对象内部可以访问；
		protected：只有该类对象及其子类对象可以访问
		internal：同一个程序集的对象可以访问；
		protected internal：访问限于当前程序集或派生自包含类的类型。

方法：
	参数传递：
		值参数：
			将 实参 复制给 形参，两者是不同的内存中的值。所以 形参 不会改变 实参。
			public void fun(int a, int b) {}
		引用参数：(可用于变量交换)
			将 实参的内存地址 复制给 形参，所以 形参 改变时，实参也会被改变
			public void fun(ref int a, ref int b) {}
		输出参数：
			return只能有一个输出，使用输出参数可以返回多个值
			public void fun(out int a, out int b) {}  // 调用时 传递 a，调用结束后，a 的值便为 函数内运算完后输出 a 的值

可空类型：
	int? i;  // 默认为 null
	等同于 Nullable<int> i = new Nullable<int>()

	null 运算符：
		num3 = num1 ?? 5;  // 如果 num1 为空 则 返回 5，则 num3 被赋值为 5。如果不为空就不会执行



存储一组对象：
	Array：from namespace(System.Array)
		索引速度快，赋值与修改元素方便；插入复杂，必须指定长度
		int[] arr;  // 声明
		int[] arr = new int[10];  // 赋值给数组
		int[] arr = { 1, 2, 3 };
		int[] arr = new int[] { 0, 1, 2 };
	ArrayList: from namespace(System.Collections)
		使用该类必须进行引用，ArrayList 对象的大小按照存储的数据动态扩充和收缩，所以无需指定长度
		ArrayList 把所有元素作为 object 类型，所以可方便的插入任意类型，也因此可能会报错类型错误
		所以该类型不是类型安全的。在存储和检索均要进行拆装箱操作，性能损耗严重。
		// 声明
		ArrList list01 = new ArrList();  也可简化  ArrList list01 = new();
		// 新增数据  
		list1.Add("cde");  
		list1.Add(5678);  
		// 修改数据  
		list[2] = 34;  
		// 移除数据  
		list.RemoveAt(0);  
		// 插入数据  
		list.Insert(0, "qwe");
	List：from namespace(System.Collections.Generic)
		List类是ArrayList类的泛型等效类
		与 ArrayList 基本相同，但是需要指定 对象内元素类型
		List<string> str01 = new List<string>();
		插入修改移除语句与 ArrayList类型 相同

	三者间，List 最常用，但是只有 Array 能定义多维


字符串：
	string str01 = new string(charArr)  // charArr 为一个 字符数组，将会被拼接为一个字符串
	String.Join(" ", arr);  // arr 是一个 字符串数组，输出为将其拼接的结果，各元素间用调用传递的第一个参数也就是空格分隔
	String.Format("{0:t} {0:D}", timeValue);  // timeValue 为一个 DateTime类型 变量


结构体(struct): 值类型
	struct 结构名 { }
	C# 中 struct 的特点：
		结构不能设初始值，类可以
		结构可带有方法、字段、索引、属性、运算符方法和事件
		结构可定义构造函数，但不能定义析构函数。但是，您不能为结构定义无参构造函数。无参构造函数(默认)是自动定义的，且不能被改变。
		与类不同，结构不能继承其他的结构或类。
		结构不能作为其他结构或类的基础结构。
		结构可实现一个或多个接口。
		结构成员不能指定为 abstract、virtual 或 protected。
		当您使用 New 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。与类不同，结构可以不使用 New 操作符即可被实例化。
		如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用
	struct 内方法赋值内字段
		struct Books
		{
		   private string title;
		   private string author;
		   private string subject;
		   private int book_id;
		   public void setValues(string t, string a, string s, int id)
		   {
			  title = t;
			  author = a;
			  subject = s;
			  book_id =id;
		   }
		}


类(class)：
	类是引用类型的。对象是类的实例。构成类的方法和变量称为类的成员。
	访问修饰符 class 类名称
	{
		字段;
		方法;
	}
	比如：
		internal class testClass
		{
			public int a;
		}

	类的实例化：因为是引用类型，肯定要用 new 关键字
		类名 对象名 = new 类名();  // 该语句 将一个 类 实例化为一个 对象
		也可简化为：类名 对象名 = new(); 
		例如：testClass theTestOne = new testClass();

	抽象类：
		抽象类不能被实例化，用于提供一个可供多个派生类共享的通用基类定义。
		例如，类库可以定义一个抽象类，将其用作多个类库函数的参数，并要求使用该库的程序员通过创建派生类来提供自己的类实现
		抽象方法：
			如 public abstract void test(int i);
			抽象方法没有实现所以以分号结尾而不是用 方法块(花括号包括内容)
			抽象类的派生类必须实现所有抽象方法

	密封类：
		使用 seal 关键字 声明密封类，将不能作为基类(不能被继承)
		
	类的成员：
		构造函数：
			特殊的成员函数，当创建类的新对象时执行
			构造函数的名称与类的名称完全相同，它没有任何返回类型!!! 
			建议设置为 public 不然在其他类中会被限制访问，也导致甚至不能在其他的 class 中被实例化
			放在类中的成员函数例如 public Asshole(){ }  // 其中的函数名 Asshole 其实也就是 类 的名称
			在类被实例化为对象时被自动调用
			可以设定参数，称为 参数化构造函数。在实例化时需要传递指定参数

		析构函数：
			在类的名称前加上 ~ 不返回值也不带参数
			析构函数用于在结束程序（比如关闭文件、释放内存等）之前释放资源。析构函数不能继承或重载
		
		静态成员：
			不随方法和类的生命周期结束而结束，意味着无论有多少个类的对象被创建，只会有一个该静态成员的副本
			比如可以通过多次调用一个(将一个静态属性++)的方法达成累加效果
			静态属性：
				可通过 类名.属性名 直接进行访问，所以可直接在类外初始化，不需要实例化为一个对象
			静态方法：
				方法只能访问静态变量。静态方法在对象被创建之前就已经存在

继承(inheritance)：
	一个 class 可以派生自多个 class 或 interface，这意味着它可以从多个 基类 或 interface 继承数据和函数
	继承结构：
		基类(base class)：
			标准类的定义
		派生类：
			class 派生类类名 : 基类名 {}
			派生类中常设置 属性成员 的访问类型为 protected (可被该类和其子类的对象访问)

	抽象类的继承：
		abstract class Shape
		{
			abstract public int area();
		}
		class Rectangle:  Shape
		{
			private int length;
			private int width;
			public Rectangle( int a=0, int b=0)
			{
				length = a;
				width = b;
			}
			public override int area ()
			{
				Console.WriteLine("Rectangle 类的面积：");
				return (width * length);
			}
		 }


	多重继承：
		C# 中的类不能多重继承，但可以通过接口方式实现
		public interface classBasic02 {}
		class class02 : classBasic, classBasic02 {}
			其中 class02 为派生类，classBasic 为 基类，classBasic02 可以用 interface 作为基类

	抽象函数 (abustract), 虚方法(vurtual function), 方法实现复写(override):
		内容在下方 多态性 的 动态多态性 中
	
		

多态性：
	与继承相关，多态性意味着有多重形式
	多态性往往表现为"一个接口，多个功能"

	静态多态性：
		函数重载：
			以是参数列表中的参数类型不同，也可以是参数个数不同。不能重载只有返回类型不同的函数声明
			class Printdata
		    {
			  void print(int i)
			  {
				 Console.WriteLine("输出整型: {0}", i );
			  }

			  void print(double f)
			  {
				 Console.WriteLine("输出浮点型: {0}" , f);
			  }
			  void print(string s)
			  {
				 Console.WriteLine("输出字符串: {0}", s);
			  }
			}

		运算符重载：
			public void 函数名 operator运算符 (参数列表) {}
			例如:自定义了运算符 + 的功能，将传入的 b 和 c 的属性相加然后输出相加后的新对象
				public static Box operator+ (Box b, Box c)
				{
				   Box box = new Box();
				   box.length = b.length + c.length;
				   box.breadth = b.breadth + c.breadth;
				   box.height = b.height + c.height;
				   return box;
				}
				Box Box1 = new Box();
				Box Box2 = new Box();
				Box Box3 = new Box();         
				Box3 = Box1 + Box2;   // 在实例化为对象后，便可将两个对象相加了
				此时 Box1 + Box2 的返回结果就为上方声明方法中输出的值
			重定义或重载 C# 中内置的运算符
			与其他函数一样，重载运算符有返回类型和参数列表

			+, -, !, ~, ++, --	这些一元运算符只有一个操作数，且可以被重载。
			+, -, *, /, %	这些二元运算符带有两个操作数，且可以被重载。
			==, !=, <, >, <=, >=	这些比较运算符可以被重载。
			&&, ||	这些条件逻辑运算符不能被直接重载。
			+=, -=, *=, /=, %=	这些赋值运算符不能被重载。
			=, ., ?:, ->, new, is, sizeof, typeof	这些运算符不能被重载。

	动态多态性：
		abstract, virtual, override 继承虚方法 案例：
		public class D  // 基类 D
		{
			public virtual void DoWork(int i)
			{
				// Origin
			}
		}

		public abstract class E : D  // 抽象派生类 E 派生自 D
		{
			public abstract override void DoWork(int i);
		}

		public class F : E  // 派生类 F 派生自 E
		{
			public override void DoWork(int i)
			{
				// New 
			}
		}

		class D 中可能有多个属性和方法，需要对这些成员进行派生并派生出新的一个方法实现
		为保证 D 中的方法可以被 override 为 抽象方法，需要使用 virtual关键字 将其声明为 虚方法 
		虚方法 可以在对象中被调用
		而又要求派生出的新方法必须包含特定的抽象方法，于是先将 D 派生 到 E (抽象类中的抽象方法可以强制要求派生自该抽象类的其他类必须包含此抽象方法)
		为了实现 基类 中的方法新的实现，需要使用 override 关键字重新声明为 抽象方法
		再将抽象方法派生给了 F，所以 F 中必须要声明 E 中的 抽象方法，再使用 override 重新声明方法的实现
		注意哦，重新声明方法实现时，必须要用 override 关键字
		使用 override 重声明实现后，如果想要在 派生类 中调用 基类 原来的 虚方法，使用 base.原方法名();
		
接口(interface):
	interface 与 抽象类 很像，但相对抽象类更常用，默认声明是 public
	用于 声明，无具体实现，在继承类中实现


枚举类型(enum): 值类型
	enum <enum_name>
	{ 
		enumeration list 
	};
	例如 enum Days { Sun, Mon, tue, Wed, thu, Fri, Sat };
	可以转换为int，(int)Days.Sun


小知识点：
	关于时间格式化：
		DateTime 变量名 = new DateTime(年份, 月份, 日期, 小时, 分钟, 秒钟)  // 可以直接 Console.WriteLine(变量名.ToString()) 输出结果为如 2023/10/10 17:18:22 的格式
		DateTime dt = new DateTime(2017,4,1,13,16,32,108);
		string.Format("{0:y yy yyy yyyy}",dt); //17 17 2017 2017
		string.Format("{0:M MM MMM MMMM}", dt);//4  04 四月 四月
		string.Format("{0:d dd ddd dddd}", dt);//1  01 周六 星期六
		string.Format("{0:t tt}", dt);//下 下午
		string.Format("{0:H HH}", dt);//13 13
		string.Format("{0:h hh}", dt);//1  01
		string.Format("{0:m mm}", dt);//16 16
		string.Format("{0:s ss}", dt);//32 32
		string.Format("{0:F FF FFF FFFF FFFFF FFFFFF FFFFFFF}", dt);//1 1  108 108  108   108    108
		string.Format("{0:f ff fff ffff fffff ffffff fffffff}", dt);//1 10 108 1080 10800 108000 1080000
		string.Format("{0:z zz zzz}", dt);//+8 +08 +08:00

		string.Format("{0:yyyy/MM/dd HH:mm:ss.fff}",dt);　　//2017/04/01 13:16:32.108
		string.Format("{0:yyyy/MM/dd dddd}", dt);　　　　　　//2017/04/01 星期六
		string.Format("{0:yyyy/MM/dd dddd tt hh:mm}", dt); //2017/04/01 星期六 下午 01:16
		string.Format("{0:yyyyMMdd}", dt);　　　　　　　　　//20170401
		string.Format("{0:yyyy-MM-dd HH:mm:ss.fff}", dt);　//2017-04-01 13:16:32.108

静态与非静态：
	静态成员存在于内存中，非静态成员需要类被实例化时才被分配内存地址
	静态方法：
		声明为静态时，方法属于整个 class，所以无需创建对象即可直接调用
		static 方法中 只能声明 static 变量和方法，而且不能使用 this 的关键字
		静态方法 比 实例化方法 效率高，但不会执行自动销毁，实例化方法可自动销毁
		静态方法和静态变量创建后始终使用同一块内存，而使用实例的方式会创建多个内存.
		静态方法与类关联，实例方法与对象关联
	静态属性：
		常用于不会经常改变但经常使用的数据比如配置信息
		无论类创建了多少个实例，一个静态字段只标识一个存储位置


异常处理：
	对程序运行出现特殊情况的相应，比如尝试除以0
	try
	{
		// 引起异常的语句
	}
	catch( ExceptionName e1 )
	{
		// 错误处理代码
	}
	catch( ExceptionName e2 )
	{
		// 错误处理代码
	}
	catch( ExceptionName eN )
	{
		// 错误处理代码
	}
	finally
	{
		// 要执行的语句
	}

C# 文件的输入与输出
	概念：文件是在磁盘中带有指定名称和指定路径的数据集合，当打开文件进行读写操作时，其变成一个流
	流 是 通过通信路径传递的字节序列。主要分为 输入流(I)用于读 和 输出流(O)用于写
	FileStream 类 进行文件操作：
		属于 namespace: System.IO ，派生自抽象类 Stream
		// 首先新建一个 FileStream 对象
		FileStream <object_name> = new FileStream( <file_name>, <FileMode Enumerator>, <FileAccess Enumerator>, <FileShare Enumerator>);
		// 例如，创建一个 FileStream 对象 F 来读取名为 sample.txt 的文件：
		FileStream F = new FileStream("sample.txt", FileMode.Open, FileAccess.Read, FileShare.Read);
		具体参数：
			FileMode	
				FileMode 枚举定义了各种打开文件的方法。FileMode 枚举的成员有：
					Append：打开一个已有的文件，并将光标放置在文件的末尾。如果文件不存在，则创建文件。
					Create：创建一个新的文件。如果文件已存在，则删除旧文件，然后创建新文件。
					CreateNew：指定操作系统应创建一个新的文件。如果文件已存在，则抛出异常。
					Open：打开一个已有的文件。如果文件不存在，则抛出异常。
					OpenOrCreate：指定操作系统应打开一个已有的文件。如果文件不存在，则用指定的名称创建一个新的文件打开。
					Truncate：打开一个已有的文件，文件一旦打开，就将被截断为零字节大小。然后我们可以向文件写入全新的数据，但是保留文件的初始创建日期。如果文件不存在，则抛出异常。
			
			FileAccess	
				FileAccess 枚举的成员有：
					Read、ReadWrite 和 Write。

			FileShare	
				FileShare 枚举的成员有：
					Inheritable：允许文件句柄可由子进程继承。Win32 不直接支持此功能。
					None：谢绝共享当前文件。文件关闭前，打开该文件的任何请求（由此进程或另一进程发出的请求）都将失败。
					Read：允许随后打开文件读取。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取的请求（由此进程或另一进程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。
					ReadWrite：允许随后打开文件读取或写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取或写入的请求（由此进程或另一进程发出）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。
					Write：允许随后打开文件写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行写入的请求（由此进程或另一进过程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。
					Delete：允许随后删除文件。


	