brief:
	客户端：
		同步：客户端提出一个请求，回应前只能等待
		异步：客户端提出一个请求，还可提出其他请求

	服务端：
		阻塞：
			接受一个请求，返回结果前不能接收其他请求
		非阻塞:
			接受一个请求，即使没有返回结果，但还是可以接受其他请求

以一个单线程的三个task举例
task1开始运行，在返回结果前出现了 task2的请求
同步：task1 开始运行则被挂起，task2 的请求被要求等待，于是造成了堵塞，一整个task2发送请求的时间内都是堵塞占用的时间，堵塞直到task1返回结果，然后接受task2的请求并开始task2
异步：task1 开始运行，task2请求出现时，直接进行task2的操作，避免了堵塞时间，此时如果出现task3，直接进行task3的运行，避免进行task2时出现的堵塞。
	到达task2需要输出时直接输出，无论task2的是否完成状态。到达task3或task1需要输出时直接输出。从而达到无堵塞时间