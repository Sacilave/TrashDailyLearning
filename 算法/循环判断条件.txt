例题：判断输入是否为素数

int judgePrime() {
	int PrimeNum = 0;
	scanf("%d", &PrimeNum);
	for (int i = 2; i < PrimeNum; i++)
	{
		if (PrimeNum == 1) { printf("是素数\n"); break; }
		else if (PrimeNum % i != 0) continue;
		else printf("不是素数\n");  return 0;
	}
	printf("是素数");
}

正常思路：判断 PrimeNum 是否不能被 i ( 2 ~ PrimeNum本身(不包括) 整除 )，为了排除 1 和 这个数本身
	如果能，说明不为素数，则可以直接输出 否 ，并跳出循环，结束程序。如果不能，说明为素数，此时需要 i++ 判断下一个是否可以将 PrimeNum 整除、
	判断到最后必定是要输出 是 的。所以 判断了 不是素数 时，不能只用 continue，不然只能跳出循环，依旧会进行循环下面的输出语句
	也就是 判定为 是素数 就继续进行的语句 (最终结束循环后继续运行循环下面的代码)，最终导致 printf ("是素数") 必定运行。
	防止情况发生，必需要将一个判断的分支的结束，设置为程序的结束，防止运行循环下方的语句，真正做到分支到结束。
	
	另外也可以用 flag 标记，最后判断 flag，再进行输出

巧妙思路：可以判断 i 这个累加的变量 是否为素数，满足 不是素数 的条件时可以直接输出 不是素数
	一直到循环结束都没触发这个条件说明是素数，循环下方，再判断， i 是否 == PrimeNum
	加上因为此时 i 必定 < PrimeNum ，则 只要 PrimeNum 不为 i 之后的 下一个 素数，i 必定和 PrimeNum 相等